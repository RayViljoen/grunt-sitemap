// Generated by CoffeeScript 1.4.0
(function() {

  module.exports = function(grunt) {
    var fs, moment, path, xml;
    path = require('path');
    fs = require('fs');
    xml = require('xmlbuilder');
    moment = require('moment');
    return grunt.registerMultiTask('sitemap', 'sitemap description', function() {
      var changefreq, file, files, homeErrMess, pattern, priority, root, rootWarnMess, sitemap, sitemapPath, sitemapStr, url, urlNode, _i, _len;
      url = grunt.config.get('pkg.homepage') || this.data.homepage;
      if (url.slice(-1) !== '/') {
        url += '/';
      }
      root = path.normalize(this.data.siteRoot || '.');
      changefreq = this.data.changefreq || 'daily';
      priority = (this.data.priority || 0.5).toString();
      pattern = path.join(root, this.data.pattern || '/**/*.html');
      homeErrMess = 'Requires "homepage" parameter. Sitemap was not created.';
      if (!url) {
        grunt.fail.warn(homeErrMess, 3);
      }
      rootWarnMess = 'No "siteRoot" parameter defined. Using current directory.';
      if (root === '.') {
        grunt.log.subhead(rootWarnMess);
      }
      files = grunt.file.expand(pattern);
      files = grunt.utils._.map(files, function(file) {
        var fileStat, mtime, rawUrlPath, urlPath;
        fileStat = {};
        rawUrlPath = file.replace(root, '');
        urlPath = rawUrlPath.replace(/(index)\.[A-z]+$/, '', 'i');
        fileStat.url = url + urlPath;
        mtime = (fs.statSync(file).mtime).getTime();
        fileStat.mtime = moment(mtime).format();
        return fileStat;
      });
      sitemap = xml.create('urlset', {
        'version': '1.0',
        'encoding': 'UTF-8'
      });
      sitemap.attribute('xmlns', 'http://www.sitemaps.org/schemas/sitemap/0.9/');
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        urlNode = sitemap.e('url');
        urlNode.e('loc', file.url);
        urlNode.e('lastmod', file.mtime);
        urlNode.e('changefreq', changefreq);
        urlNode.e('priority', priority);
      }
      sitemapStr = sitemap.end({
        'pretty': true,
        'indent': '  ',
        'newline': '\n'
      });
      sitemapPath = path.join(root, 'sitemap.xml');
      grunt.file.write(sitemapPath, sitemapStr);
      grunt.log.writeln('Sitemap created successfully');
      grunt.log.writeln('OK');
      if (grunt.task.current.errorCount) {
        return false;
      } else {
        return true;
      }
    });
  };

}).call(this);
